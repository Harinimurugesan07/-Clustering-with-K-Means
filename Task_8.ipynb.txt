{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pto5X7yNWMaF",
        "outputId": "73e14355-1bed-490c-924c-1f9cf53ae435"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)\n",
            "Requirement already satisfied: seaborn in /usr/local/lib/python3.11/dist-packages (0.13.2)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (1.6.1)\n",
            "Requirement already satisfied: numpy>=1.23.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.0.2)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.3)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.59.0)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.9)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (25.0)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.3.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.3)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.16.1)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.5.1)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (3.6.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n"
          ]
        }
      ],
      "source": [
        "pip install pandas matplotlib seaborn scikit-learn"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd"
      ],
      "metadata": {
        "id": "XiG3UCgKW4g7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from google.colab import files\n",
        "uploaded = files.upload()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 127
        },
        "id": "3djYQX6GWRbo",
        "outputId": "32ef7f13-d90e-4c43-bc65-31174fd33bfb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-074fb9d0-677d-4972-b3ad-4dac9a48d247\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-074fb9d0-677d-4972-b3ad-4dac9a48d247\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving Mall_Customers.csv to Mall_Customers.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "df = pd.read_csv('Mall_Customers.csv')            # read into DataFrame\n",
        "df.head()                             # show first 5 rows"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 261
        },
        "id": "KXanhbNeWRen",
        "outputId": "c0791f50-8f37-455f-b406-abdfa51d4312"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   CustomerID  Gender  Age  Annual Income (k$)  Spending Score (1-100)\n",
              "0           1    Male   19                  15                      39\n",
              "1           2    Male   21                  15                      81\n",
              "2           3  Female   20                  16                       6\n",
              "3           4  Female   23                  16                      77\n",
              "4           5  Female   31                  17                      40"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5aad687c-155a-4947-99c0-87215c831536\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Annual Income (k$)</th>\n",
              "      <th>Spending Score (1-100)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Male</td>\n",
              "      <td>19</td>\n",
              "      <td>15</td>\n",
              "      <td>39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Male</td>\n",
              "      <td>21</td>\n",
              "      <td>15</td>\n",
              "      <td>81</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Female</td>\n",
              "      <td>20</td>\n",
              "      <td>16</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Female</td>\n",
              "      <td>23</td>\n",
              "      <td>16</td>\n",
              "      <td>77</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Female</td>\n",
              "      <td>31</td>\n",
              "      <td>17</td>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5aad687c-155a-4947-99c0-87215c831536')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5aad687c-155a-4947-99c0-87215c831536 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5aad687c-155a-4947-99c0-87215c831536');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-ad788ec8-2326-4ebd-84c5-c36435ceac6f\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ad788ec8-2326-4ebd-84c5-c36435ceac6f')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-ad788ec8-2326-4ebd-84c5-c36435ceac6f button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 200,\n  \"fields\": [\n    {\n      \"column\": \"CustomerID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 57,\n        \"min\": 1,\n        \"max\": 200,\n        \"num_unique_values\": 200,\n        \"samples\": [\n          96,\n          16,\n          31\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 18,\n        \"max\": 70,\n        \"num_unique_values\": 51,\n        \"samples\": [\n          55,\n          26\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Annual Income (k$)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26,\n        \"min\": 15,\n        \"max\": 137,\n        \"num_unique_values\": 64,\n        \"samples\": [\n          87,\n          101\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Spending Score (1-100)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25,\n        \"min\": 1,\n        \"max\": 99,\n        \"num_unique_values\": 84,\n        \"samples\": [\n          83,\n          39\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load dataset\n",
        "df = pd.read_csv(\"Mall_Customers.csv\")\n",
        "\n",
        "# View first rows\n",
        "print(df.head())\n",
        "print(df.info())\n",
        "print(df.describe())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Yga6UWV3WRh7",
        "outputId": "68f228d6-eac1-4c92-debe-3094fe986303"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   CustomerID  Gender  Age  Annual Income (k$)  Spending Score (1-100)\n",
            "0           1    Male   19                  15                      39\n",
            "1           2    Male   21                  15                      81\n",
            "2           3  Female   20                  16                       6\n",
            "3           4  Female   23                  16                      77\n",
            "4           5  Female   31                  17                      40\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 200 entries, 0 to 199\n",
            "Data columns (total 5 columns):\n",
            " #   Column                  Non-Null Count  Dtype \n",
            "---  ------                  --------------  ----- \n",
            " 0   CustomerID              200 non-null    int64 \n",
            " 1   Gender                  200 non-null    object\n",
            " 2   Age                     200 non-null    int64 \n",
            " 3   Annual Income (k$)      200 non-null    int64 \n",
            " 4   Spending Score (1-100)  200 non-null    int64 \n",
            "dtypes: int64(4), object(1)\n",
            "memory usage: 7.9+ KB\n",
            "None\n",
            "       CustomerID         Age  Annual Income (k$)  Spending Score (1-100)\n",
            "count  200.000000  200.000000          200.000000              200.000000\n",
            "mean   100.500000   38.850000           60.560000               50.200000\n",
            "std     57.879185   13.969007           26.264721               25.823522\n",
            "min      1.000000   18.000000           15.000000                1.000000\n",
            "25%     50.750000   28.750000           41.500000               34.750000\n",
            "50%    100.500000   36.000000           61.500000               50.000000\n",
            "75%    150.250000   49.000000           78.000000               73.000000\n",
            "max    200.000000   70.000000          137.000000               99.000000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.decomposition import PCA\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "pca = PCA(n_components=2)\n",
        "df_pca = pca.fit_transform(df.select_dtypes(include=[float, int]))\n",
        "plt.scatter(df_pca[:,0], df_pca[:,1])\n",
        "plt.title(\"PCA View of Data\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 230
        },
        "id": "JtW0jgKEWRl8",
        "outputId": "cb15d47a-75b7-4465-ccaf-4107fe7a0001"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import KMeans\n",
        "\n",
        "inertia = []\n",
        "K = range(1, 11)\n",
        "\n",
        "for k in K:\n",
        "    kmeans = KMeans(n_clusters=k, random_state=42)\n",
        "    kmeans.fit(df[['Annual Income (k$)', 'Spending Score (1-100)']])\n",
        "    inertia.append(kmeans.inertia_)\n",
        "\n",
        "plt.plot(K, inertia, 'bo-')\n",
        "plt.xlabel('Number of clusters')\n",
        "plt.ylabel('Inertia')\n",
        "plt.title('Elbow Method')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        },
        "id": "vPeYMPCdXGSB",
        "outputId": "42f421b6-13e0-4914-f53e-b6d559e94e1d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Assume K=5 from elbow method\n",
        "kmeans = KMeans(n_clusters=5, random_state=42)\n",
        "df['Cluster'] = kmeans.fit_predict(df[['Annual Income (k$)', 'Spending Score (1-100)']])"
      ],
      "metadata": {
        "id": "q_tbQzOuXGU8"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "\n",
        "sns.scatterplot(data=df, x='Annual Income (k$)', y='Spending Score (1-100)', hue='Cluster', palette='Set1')\n",
        "plt.title(\"Customer Segmentation Clusters\")\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "V33CXBtpXGXu",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "outputId": "a08ca64f-58e2-4fdf-c5b3-74b05480434a"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import silhouette_score\n",
        "\n",
        "score = silhouette_score(df[['Annual Income (k$)', 'Spending Score (1-100)']], df['Cluster'])\n",
        "print(\"Silhouette Score:\", score)"
      ],
      "metadata": {
        "id": "z-MxISFeWRok",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9af3d08f-c14f-4531-ba51-93fa4759eafe"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Silhouette Score: 0.553931997444648\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "6C2gRV3ZWRrq"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}